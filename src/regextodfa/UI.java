/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package regextodfa;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.MutableTreeNode;
import javax.swing.tree.TreeModel;

/**
 *
 * @author kenla
 */
public class UI extends javax.swing.JFrame {
    ArrayList alphabet = new ArrayList<>();

    /**
     * Creates new form UI
     */
    public UI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        SyntacticTree = new javax.swing.JTree();
        jLabel2 = new javax.swing.JLabel();
        inputTf = new javax.swing.JTextField();
        uploadInput = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        AlphabetTA = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableTA = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        inputChain = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAlwaysOnTop(true);
        setName("UI"); // NOI18N
        setSize(new java.awt.Dimension(600, 600));

        jLabel1.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel1.setText("Arbol Sintactico");

        jScrollPane1.setViewportView(SyntacticTree);

        jLabel2.setText("Introduzca la E.R. a Procesar:");

        uploadInput.setText("Calcular");
        uploadInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadInputActionPerformed(evt);
            }
        });

        AlphabetTA.setColumns(20);
        AlphabetTA.setRows(5);
        jScrollPane2.setViewportView(AlphabetTA);

        jLabel3.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel3.setText("Alfabeto y estados AFD");

        tableTA.setColumns(20);
        tableTA.setRows(5);
        jScrollPane3.setViewportView(tableTA);

        jLabel4.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel4.setText("Datos del nodo/Cadena reconocida");

        jLabel6.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N
        jLabel6.setText("Laboratorio 1");

        jLabel5.setText("Introduzca la cadena a reconocer:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(49, 49, 49)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(39, 39, 39)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel6)
                                            .addComponent(jLabel2)))
                                    .addComponent(jLabel5)
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(inputChain, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(inputTf, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(83, 83, 83)
                                .addComponent(uploadInput, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jLabel3)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addComponent(jLabel4)))))
                .addContainerGap(66, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(175, 175, 175)
                .addComponent(jLabel1)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 27, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE)
                            .addComponent(jScrollPane2))
                        .addGap(8, 8, 8))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(47, 47, 47)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(inputTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(inputChain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(uploadInput, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void uploadInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadInputActionPerformed
        // TODO add your handling code here:
        
        //init Dfa main class
        RegexToDfa regexProcessor = new RegexToDfa();
        //getting the input regex
        String inputRegex = inputTf.getText();
        System.out.println("Cadena introducida - "+inputRegex);
        //put regex to be procesed
        regexProcessor.initialize(inputRegex);
        //getting root to bult tree
        Node root = regexProcessor.getRoot();
        //init the root to the new TreeModel
        DefaultMutableTreeNode model = new DefaultMutableTreeNode(root);
        //model.getUserObject();
        //Fill tree with the travel arround nodes in hierarchical order
        fillTree(model, root);
        //init model with the root node
        DefaultTreeModel treeModel = new DefaultTreeModel(model);
        //init ui componet with the data of the model
        SyntacticTree.setModel(treeModel);
        //putting alphabet
        AlphabetTA.setText(concatAlphabet());
        //getting states to make DFA table
        Set<State> DfaStates = regexProcessor.getDstates();
        State rootState = regexProcessor.getRootState();
        //hashmaps with all the moves
        HashMap<String, State> trash = rootState.getAllMoves();
        String DFATable = "";
        fillDFA(trash, DFATable);
        
        //know if there is a chain to analize and determine if is valid or not
        if(!inputChain.getText().equals("")){
            String Answer = regexProcessor.checkChain(inputChain.getText());
            tableTA.setText(Answer);
        }else{
            tableTA.setText("");
        }
        
    }//GEN-LAST:event_uploadInputActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new UI().setVisible(true);
            }
        });
    }
    
    private void fillTree(DefaultMutableTreeNode dNode, Node node){
        addAlphabet(node.toStringSimple());
        if(node.getLeft()!=null){
        DefaultMutableTreeNode leftSon = new DefaultMutableTreeNode(node.getLeft());
        dNode.add(leftSon);
        fillTree(leftSon, node.getLeft());
        }
        if(node.getRight()!=null){
        DefaultMutableTreeNode rightSon = new DefaultMutableTreeNode(node.getRight());
        dNode.add(rightSon);
        fillTree(rightSon, node.getRight());
        }
  
    }
    
    private void addAlphabet(String symbol){
        if(!alphabet.contains(symbol)){
            alphabet.add(symbol);
        }
    }
    
    private String concatAlphabet(){
        String temp = "Alfabeto \n \n {";
        for (Object symbol : alphabet){
            temp+=" "+symbol.toString()+",";
        }
        temp+="}";
        return temp;
    }
    
    private void fillDFA(HashMap<String, State> datos, String out){
        for (Map.Entry<String, State> entry : datos.entrySet()) {
            String tempNameString = "";
            for( Object a: entry.getValue().getName()){
                tempNameString += a.toString()+", ";
            }
            if (tempNameString.equals("")){
                tempNameString = "Vacio (Estado final)";
            }
            out += "Pos " + (entry.getValue().getId() -1) + " || Symbol "+ entry.getKey()+ " -> "+tempNameString+"\n";
        }
        System.out.println(out);
    }
    
    private void generarTabla(State state){
        HashMap tranD = new HashMap();
        generarTabla(state);
        if(tranD.get(state.name)!=null){
            HashMap moves = new HashMap();
           // for(char a : state.)
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea AlphabetTA;
    private javax.swing.JTree SyntacticTree;
    private javax.swing.JTextField inputChain;
    private javax.swing.JTextField inputTf;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea tableTA;
    private javax.swing.JButton uploadInput;
    // End of variables declaration//GEN-END:variables
}

